var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/* eslint-disable max-len */
import React from 'react';
import PropTypes from 'prop-types';

var scale = 1 / 0.375;

var TrafficLight = function TrafficLight(_ref) {
  var onRedClick = _ref.onRedClick,
      onYellowClick = _ref.onYellowClick,
      onGreenClick = _ref.onGreenClick,
      RedOn = _ref.RedOn,
      YellowOn = _ref.YellowOn,
      GreenOn = _ref.GreenOn,
      Size = _ref.Size,
      BlackColor = _ref.BlackColor,
      DisabledColor = _ref.DisabledColor,
      RedColor = _ref.RedColor,
      YellowColor = _ref.YellowColor,
      GreenColor = _ref.GreenColor,
      props = _objectWithoutProperties(_ref, ['onRedClick', 'onYellowClick', 'onGreenClick', 'RedOn', 'YellowOn', 'GreenOn', 'Size', 'BlackColor', 'DisabledColor', 'RedColor', 'YellowColor', 'GreenColor']);

  return React.createElement(
    'svg',
    _extends({ width: Size + 'px', height: Size * scale + 'px', viewBox: '0 0 60 160', version: '1.1' }, props),
    React.createElement(
      'defs',
      null,
      React.createElement('circle', { style: { cursor: onRedClick ? 'pointer' : undefined }, id: 'redCirclePath', cx: '30', cy: '30', r: '20' }),
      React.createElement('circle', { style: { cursor: onYellowClick ? 'pointer' : undefined }, id: 'yellowCirclePath', cx: '30', cy: '80', r: '20' }),
      React.createElement('circle', { style: { cursor: onGreenClick ? 'pointer' : undefined }, id: 'greenCirclePath', cx: '30', cy: '130', r: '20' }),
      React.createElement(
        'filter',
        { x: '-50%', y: '-50%', width: '200%', height: '200%', filterUnits: 'objectBoundingBox', id: 'shadowFilter' },
        React.createElement('feGaussianBlur', { stdDeviation: '3', 'in': 'SourceAlpha', result: 'shadowBlurInner1' }),
        React.createElement('feOffset', { dx: '0', dy: '4', 'in': 'shadowBlurInner1', result: 'shadowOffsetInner1' }),
        React.createElement('feComposite', { 'in': 'shadowOffsetInner1', in2: 'SourceAlpha', operator: 'arithmetic', k2: '-1', k3: '1', result: 'shadowInnerInner1' }),
        React.createElement('feColorMatrix', { values: '0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.5 0', type: 'matrix', 'in': 'shadowInnerInner1' })
      )
    ),
    React.createElement('rect', { fill: BlackColor, x: '0', y: '0', width: '60', height: '160', rx: '8' }),
    React.createElement('use', { fill: RedOn ? RedColor : DisabledColor, fillRule: 'evenodd', xlinkHref: '#redCirclePath' }),
    React.createElement('use', { fill: YellowOn ? YellowColor : DisabledColor, fillRule: 'evenodd', xlinkHref: '#yellowCirclePath' }),
    React.createElement('use', { fill: GreenOn ? GreenColor : DisabledColor, fillRule: 'evenodd', xlinkHref: '#greenCirclePath' }),
    React.createElement(
      'g',
      null,
      React.createElement('use', { onClick: onRedClick, fill: 'black', fillOpacity: '1', filter: 'url(#shadowFilter)', xlinkHref: '#redCirclePath' }),
      React.createElement('use', { onClick: onYellowClick, fill: 'black', fillOpacity: '1', filter: 'url(#shadowFilter)', xlinkHref: '#yellowCirclePath' }),
      React.createElement('use', { onClick: onGreenClick, fill: 'black', fillOpacity: '1', filter: 'url(#shadowFilter)', xlinkHref: '#greenCirclePath' })
    )
  );
};

TrafficLight.propTypes = {
  onRedClick: PropTypes.func,
  onYellowClick: PropTypes.func,
  onGreenClick: PropTypes.func,
  RedOn: PropTypes.bool,
  YellowOn: PropTypes.bool,
  GreenOn: PropTypes.bool,
  Size: PropTypes.number,
  BlackColor: PropTypes.string,
  DisabledColor: PropTypes.string,
  RedColor: PropTypes.string,
  YellowColor: PropTypes.string,
  GreenColor: PropTypes.string
};

TrafficLight.defaultProps = {
  onRedClick: undefined,
  onYellowClick: undefined,
  onGreenClick: undefined,
  RedOn: false,
  YellowOn: false,
  GreenOn: false,
  Size: 60,
  BlackColor: '#000000',
  DisabledColor: '#4A4A4A',
  RedColor: '#D0021B',
  YellowColor: '#F8E71C',
  GreenColor: '#7ED321'
};

export default TrafficLight;